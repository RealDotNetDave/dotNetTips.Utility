<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dotNetTips.Utility.Standard.Extensions</name>
    </assembly>
    <members>
        <member name="T:dotNetTips.Utility.Standard.Extensions.CollectionExtensions">
            <summary>
            Class CollectionExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.AddIfNotExists``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds if not exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">list - List cannot be null.
            or
            value - Value cannot be null.</exception>
            <exception cref="T:System.ArgumentException">list - List cannot be read-only.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.AddIfNotExists``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds if not exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="values">The values.</param>
            <exception cref="T:System.ArgumentNullException">list - List cannot be null.
            or
            values - Values cannot be null.</exception>
            <exception cref="T:System.ArgumentException">list - List cannot be read-only.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="newItems">The new items.</param>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.AddRange``3(System.Collections.Generic.IDictionary{``1,``2},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Adds the range.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="list">The list.</param>
            <param name="items">The items.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">list - Dictionary cannot be null.
            or
            key - Key cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">list - Dictionary cannot be null.
            or
            key - Key cannot be null.</exception>
            <exception cref="T:System.ArgumentException">list - Dictionary cannot be null.
            or
            key - Key cannot be null.</exception>
            <remarks>Code by: Lucas</remarks>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.CopyToList``1(System.Collections.Generic.List{``0})">
            <summary>
            Copies the collection to a generic List.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="source">The source.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.Count(System.Collections.IEnumerable)">
            <summary>
            Counts the specified list.
            </summary>
            <param name="list">The list.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.DisposeCollection``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Disposes the collection.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="items">The items.</param>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.FastAny``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Fasts any.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <returns>System.Boolean.</returns>
            <exception cref="T:System.ArgumentNullException">predicate - predicate</exception>
            <exception cref="T:System.ArgumentNullException">predicate - predicate</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.FastCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Counts the the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            source</exception>
            <exception cref="T:System.ArgumentNullException">source
            or
            source</exception>
            <exception cref="T:System.Exception">source
            or
            source</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds first item or returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="match">The match.</param>
            <returns>System.Nullable&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null.
            or
            match - Match cannot be null.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.FromDelimitedString(System.String,System.Char)">
            <summary>
            Converts delimited string to list.
            </summary>
            <param name="delimitedInput">The string buffer.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
            <remarks>Code by: Blake Pell</remarks>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.HasItems(System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified source has items.
            </summary>
            <param name="source">The source.</param>
            <returns><c>true</c> if the specified source has items; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.HasItems(System.Collections.ICollection)">
            <summary>
            Determines whether the specified source has items.
            </summary>
            <param name="source">The source.</param>
            <returns><c>true</c> if the specified source has items; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.HasItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Determines whether the specified source has items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns><c>true</c> if the specified source has items; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Orders a list based on a sort expression. Useful in object data binding scenarios where
            the ObjectDataSource generates a dynamic sort expression (example: "Name desc") that
            specifies the property of the object sort on.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="sortExpression">The sort expression.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <remarks>Original code by: C.F.Meijers</remarks>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Pages the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>IEnumerable&lt;IEnumerable&lt;T&gt;&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null.
            or
            list - Page size cannot be 0 length.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.PickRandom``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Picks random items out of the list.
            </summary>
            <typeparam name="T">Collection type.</typeparam>
            <param name="list">The list.</param>
            <param name="count">The selection count.</param>
            <returns>IEnumerable list.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null or have a 0 value.
            or
            list - Count cannot be 0.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.Pivot``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Collections.Generic.IEnumerable{``0},``3})">
            <summary>
            Groups the elements of a sequence according to a specified firstKey selector function and
            rotates the unique values from the secondKey selector function into multiple values in
            the output, and performs aggregations.
            </summary>
            <typeparam name="TSource">The type of the t list.</typeparam>
            <typeparam name="TFirstKey">The type of the t first key.</typeparam>
            <typeparam name="TSecondKey">The type of the t second key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="list">The list.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="aggregate">The aggregate.</param>
            <returns>Dictionary&lt;TFirstKey, Dictionary&lt;TSecondKey, TValue&gt;&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null or have a 0 value.
            or
            list - Aggregate cannot be null.
            or
            firstKeySelector - First key selector cannot be null.
            or
            secondKeySelector - Second key selector cannot be null.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomizes the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null or have a 0 value.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
            Converts list to a delimited string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="delimiter">The delimiter (default is comma if not supplied).</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null or have a 0 value.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            <summary>
            Converts an enumeration of groupings into a Dictionary of those groupings.
            </summary>
            <typeparam name="TKey">Key type of the grouping and list.</typeparam>
            <typeparam name="TValue">Element type of the grouping and list list.</typeparam>
            <param name="list">The list.</param>
            <returns>A list of groupings such that the key of the list is TKey type and the value
            is List of TValue type.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null or have a 0 value.</exception>
            <remarks>Original code by: James Michael Hare</remarks>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.ToDistinct(System.String[])">
            <summary>
            Returns no duplicates.
            </summary>
            <param name="list">The list.</param>
            <returns>System.String[].</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null or have a 0 length.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.ToImmutable``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            To the immutable dictionary.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="values">The values.</param>
            <returns>IImmutableDictionary&lt;TKey, TValue&gt;.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.ToImmutable``1(System.Collections.Generic.List{``0})">
            <summary>
            To the immutable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <returns>IImmutableList&lt;T&gt;.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.ToListAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a Generic.List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null or have a 0 value.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To the observable list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>ObservableCollection&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null or have a 0 value.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IList{``0})">
            <summary>
            Creates a read only list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>ReadOnlyCollection&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null or have a 0 value.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Returns list based on function.
            </summary>
            <typeparam name="TSource">The type of the list.</typeparam>
            <param name="list">The list.</param>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="predicate">The predicate.</param>
            <returns>IEnumerable&lt;TSource&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null or have a 0 value.</exception>
            <remarks>Original code by: Phil Campbell</remarks>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Returns list based on function.
            </summary>
            <typeparam name="TSource">The type of the list.</typeparam>
            <param name="list">The list.</param>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="predicate">The predicate.</param>
            <returns>IEnumerable&lt;TSource&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">list - Source cannot be null or have a 0 value.</exception>
            <remarks>Original code by: Phil Campbell</remarks>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.DisposeCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Disposes the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.DisposeCollection(System.Collections.IEnumerable)">
            <summary>
            Tries to dispose collection items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.CollectionExtensions.ProcessCollectionToDispose(System.Collections.IEnumerable)">
            <summary>
            Processes the collection to dispose.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.ColorExtensions">
            <summary>
            Class ColorExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ColorExtensions.Average(System.Collections.Generic.IEnumerable{System.Drawing.Color})">
            <summary>
            Averages the specified colors in the collection.
            </summary>
            <param name="colors">The colors.</param>
            <returns>Color.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">colors - colors</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">colors - colors</exception>
            <exception cref="T:System.ArgumentNullException">colors</exception>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.ConfigurationBuilderExtensions">
            <summary>
            Class ConfigurationBuilderExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ConfigurationBuilderExtensions.LoadSection``1(Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            Loads the configuration section based on the name of the type of T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="config">The configuration.</param>
            <returns>T.</returns>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.DateTimeExtensions">
            <summary>
            Extensions for DateTime
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.DateTimeExtensions.GetLast(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the last.
            </summary>
            <param name="input">The date/ time.</param>
            <param name="dayOfWeek">The day of week.</param>
            <returns>DateTime.</returns>
            <exception cref="T:System.ArgumentNullException">input - Input is invalid.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.DateTimeExtensions.GetNext(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the next.
            </summary>
            <param name="input">The date/ time.</param>
            <param name="dayOfWeek">The day of week.</param>
            <returns>DateTime.</returns>
            <exception cref="T:System.ArgumentNullException">input - Input is invalid.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.DateTimeExtensions.Intersects(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Intersects the specified start date.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="intersectingStartDate">The intersecting start date.</param>
            <param name="intersectingEndDate">The intersecting end date.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.DateTimeExtensions.LocalTimeFromUtc(System.DateTime,System.Int32)">
            <summary>
            Given a date, it returns the next (specified) day of week
            </summary>
            <param name="date">Date to process</param>
            <param name="timezoneFromUtc">Hours of the timezone from UTC</param>
            <returns>Future date</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.DateTimeExtensions.NextDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Given a date, it returns the next (specified) day of week
            </summary>
            <param name="date">Date to process</param>
            <param name="day">Day of week to find on calendar</param>
            <returns>Future date</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.DateTimeExtensions.ToFriendlyDateString(System.DateTime)">
            <summary>
            To the friendly date string.
            </summary>
            <param name="input">The date.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.DateTimeExtensions.IsInRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Determines whether value is in range of the specified beginning time and end time.
            </summary>
            <param name="value">The value.</param>
            <param name="beginningTime">The beginning date.</param>
            <param name="endTime">The end date.</param>
            <returns><c>true</c> if [is in range] [the specified beginning date]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.DateTimeExtensions.IsInRange(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Determines whether value is in range of the specified beginning time and end time.
            </summary>
            <param name="value">The value.</param>
            <param name="beginningTime">The beginning time.</param>
            <param name="endTime">The end time.</param>
            <returns><c>true</c> if [is in range] [the specified beginning time]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.DateTimeExtensions.IsInRange(System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            DDetermines whether value is in range of the specified beginning time and end time.
            </summary>
            <param name="value">The value.</param>
            <param name="beginningTime">The beginning time.</param>
            <param name="endTime">The end time.</param>
            <returns><c>true</c> if [is in range] [the specified beginning time]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.EnumExtensions">
            <summary>
            Class EnumExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.EnumExtensions.As``1(System.Enum)">
            <summary>
            Converts enum to type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Gets the enum description.
            </summary>
            <param name="val">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.EnumExtensions.GetItems``1(System.Enum)">
            <summary>
            Gets the items in an enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <returns>IList&lt;EnumItem&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.EnumExtensions.Parse``1(System.String)">
            <summary>
            Parses the specified enum name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <returns>T.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.EnumExtensions.GetDescriptionInternal``1(System.Object)">
            <summary>Gets the description of the enum value.</summary>
            <typeparam name="T"></typeparam>
            <param name="val">The value.</param>
            <returns>EnumItem&lt;T&gt;.</returns>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.EnumItem`1">
            <summary>
            Class EnumItem.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.EnumItem`1.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.EnumItem`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.ExceptionExtensions">
            <summary>
            Class ExceptionExtension.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ExceptionExtensions.FromHierarchy``1(``0,System.Func{``0,``0})">
            <summary>
            Hierarchy.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <param name="source">The source.</param>
            <param name="nextItem">The next item.</param>
            <returns>IEnumerable&lt;TSource&gt;.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ExceptionExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <summary>
            Hierarchy.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <param name="source">The source.</param>
            <param name="nextItem">The next item.</param>
            <param name="canContinue">The can continue.</param>
            <returns>IEnumerable&lt;TSource&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">canContinue
            or
            nextItem</exception>
            <exception cref="T:System.ArgumentNullException">canContinue
            or
            nextItem</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ExceptionExtensions.GetAllMessages(System.Exception)">
            <summary>
            Gets all messages.
            </summary>
            <param name="exception">The exception.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ExceptionExtensions.GetAllMessages(System.Exception,System.String)">
            <summary>
            Gets all messages.
            </summary>
            <param name="exception">The exception.</param>
            <param name="separator">The separator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ExceptionExtensions.TraverseFor``1(System.Exception)">
            <summary>
            Traverses Exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ex">The ex.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException">ex - Exception cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">ex - Exception cannot be null.</exception>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.GuidExtensions">
            <summary>
            Class GuidExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.GuidExtensions.ToDigits(System.Guid)">
            <summary>
            Returns the Guid without dashes.
            </summary>
            <param name="value">The Guid value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.HttpRequestExtensions">
            <summary>
            Class HttpRequestExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.HttpRequestExtensions.GetRawBodyStringAsync(Microsoft.AspNetCore.Http.HttpRequest,System.Text.Encoding)">
            <summary>
            Retrieve the raw body as a string from the Request.Body stream
            </summary>
            <param name="request">Request instance to apply to</param>
            <param name="encoding">Optional - Encoding, defaults to UTF8</param>
            <returns>Task&lt;System.String&gt;.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.HttpRequestExtensions.GetRawBodyBytesAsync(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Retrieves the raw body as a byte array from the Request.Body stream
            </summary>
            <param name="request">The request.</param>
            <returns>Task&lt;System.Byte[]&gt;.</returns>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.JsonSerializer">
            <summary>
            Class JsonSerializer.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified Json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The json.</param>
            <returns>T.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.JsonSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.MathExtensions">
            <summary>
            Class MathExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.Round(System.Double)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">value - Value is invalid.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.Round(System.Double,System.Int32)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">The digits.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">value - Value is invalid.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.Round(System.Double,System.MidpointRounding)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="mode">The mode.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">value - Value is invalid.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">The digits.</param>
            <param name="mode">The mode.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">value - Value is invalid.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.Round(System.Decimal)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">value - Value is invalid.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.Round(System.Decimal,System.Int32)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">The digits.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">value - Value is invalid.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.Round(System.Decimal,System.MidpointRounding)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="mode">The mode.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">value - Value is invalid.</exception>
            <exception cref="T:System.ArgumentNullException">value - Value is invalid.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.Round(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">The digits.</param>
            <param name="mode">The mode.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">value - Value is invalid.</exception>
            <exception cref="T:System.ArgumentNullException">value - Value is invalid.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.CalculatePercent(System.TimeSpan,System.TimeSpan)">
            <summary>
            Calculates the percent.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.CalculatePercent(System.Int32,System.Int32)">
            <summary>
            Calculates the percent.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.CalculatePercent(System.Double,System.Double)">
            <summary>
            Calculates the percent.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.MathExtensions.CalculatePercent(System.Int64,System.Int64)">
            <summary>
            Calculates the percent.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.NumberExtensions">
            <summary>
            Class IntegerExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.Decrement(System.Int32,System.Int32,System.Int32)">
            <summary>
            Decrement a number ensuring it never passes a given lower-bound.
            </summary>
            <param name="value">Number to process</param>
            <param name="lowerBound">Lower bound</param>
            <param name="step">Step of the decrement</param>
            <returns>Integer</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.EnsureMinimumValue(System.Int32,System.Int32)">
            <summary>
            Ensures the minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="minValue">The minimum value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.FormatFileSize(System.Int64)">
            <summary>
            Formats the size of the file.
            </summary>
            <param name="fileSize">Size of the file.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">fileSize - File size is invalid.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.Increment(System.Int32,System.Int32,System.Int32)">
            <summary>
            Increment a number ensuring it never passes a given upper-bound.
            </summary>
            <param name="value">Number to process</param>
            <param name="upperBound">Upper bound</param>
            <param name="step">Step of the increment</param>
            <returns>Integer</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.IsEven(System.Int32)">
            <summary>
            Indicate whether the number is even.
            </summary>
            <param name="value">Number to process</param>
            <returns>True/False</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indicate whether the number falls in the specified range.
            </summary>
            <param name="value">Number to process</param>
            <param name="lower">Lower bound</param>
            <param name="upper">Upper bound</param>
            <returns>True/False</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.IsInRange(System.Int64,System.Int64,System.Int64)">
            <summary>
            Determines whether [is in range] [the specified lower].
            </summary>
            <param name="value">The value.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <returns><c>true</c> if [is in range] [the specified lower]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.IsInRange(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is in range] [the specified lower].
            </summary>
            <param name="value">The value.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <returns><c>true</c> if [is in range] [the specified lower]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.IsInRange(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Determines whether [is in range] [the specified lower].
            </summary>
            <param name="value">The value.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <returns><c>true</c> if [is in range] [the specified lower]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.IsInterval(System.Int32,System.Int32)">
            <summary>
            Determines if the Integer is of the specified interval. E.g. if the interval is 100 and
            the integer is 400, it would return true. This function uses the Mod operator, for the
            above example: (300 Mod 100 = 0)
            </summary>
            <param name="value">The number.</param>
            <param name="interval">The interval.</param>
            <returns><c>true</c> if the specified number is interval; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.RemoveDuplicates(System.Int32[])">
            <summary>
            Noes the duplicates.
            </summary>
            <param name="values">The values.</param>
            <returns>System.Int32().</returns>
            <remarks>Code by: Kevin S Gallagher</remarks>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.RoundToPowerOf2(System.Int32)">
            <summary>
            Returns the nearest power of 2 that is bigger than the number.
            </summary>
            <param name="value">Number to process</param>
            <returns>Integer</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.ToPositiveValue(System.Int32)">
            <summary>
            To the positive value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.ToPositiveValue(System.Int64)">
            <summary>
            To the positive value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.ToPositiveValue(System.Decimal)">
            <summary>
            To the positive value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.ToStringOrEmpty(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Parse the number to a string or a default string if outside given range.
            </summary>
            <param name="value">Number to process</param>
            <param name="lowerLimit">Lower bound</param>
            <param name="upperLimit">Upper bound</param>
            <param name="defaultText">Default text</param>
            <returns>String</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.ToWords(System.Int32)">
            <summary>
            Translate the number in words (English)
            </summary>
            <param name="value">Number to translate</param>
            <returns>String</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.NumberExtensions.FormatSizeToString(System.Int64)">
            <summary>
            Formats the size to string.
            </summary>
            <param name="fileSize">Size of the file.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.ObjectExtensions">
            <summary>
            Class ObjectExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.As``1(System.Object)">
            <summary>
            Returns the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException">value - Value cannot be null.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.Clone``1(System.Object)">
            <summary>
            Clones the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns>T.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.ComputeMD5Hash(System.Object)">
            <summary>
            Computes the m d5 hash.
            </summary>
            <param name="data">The data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.ComputeSha256Hash(System.Object)">
            <summary>
            Computes the sha256 hash.
            </summary>
            <param name="data">The data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.DisposeFields(System.IDisposable)">
            <summary>
            Disposes the fields.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.FromJson``1(System.String)">
            <summary>
            Creates object from Json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The json.</param>
            <returns>T.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.FromJsonFile``1(System.String)">
            <summary>
            Creates object from a Json file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName">Name of the file.</param>
            <returns>T.</returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.HasProperty(System.Object,System.String)">
            <summary>
            Determines whether the specified object has the property.
            </summary>
            <param name="obj">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the specified property name has property; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">propertyName - Source cannot be null.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.In``1(``0,``0[])">
            <summary>
            Ins the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="list">The list.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">source - Source cannot be null.
            or
            list - List cannot be null or have a 0 length.</exception>
            <remarks>Original code by: Rory Becker</remarks>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.InitializeFields(System.Object)">
            <summary>
            Initializes the fields.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.IsNotNull(System.Object)">
            <summary>
            Determines whether [is not null] [the specified object].
            </summary>
            <param name="obj">The obj.</param>
            <returns><count>true</count> if [is not null] [the specified object]; otherwise, <count>false</count>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.IsNull(System.Object)">
            <summary>
            Determines whether the specified object is null.
            </summary>
            <param name="obj">The object.</param>
            <returns><count>true</count> if the specified object is null; otherwise, <count>false</count>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.StripNull(System.Object)">
            <summary>
            Strips the null.
            </summary>
            <param name="input">The field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.ToJson(System.Object)">
            <summary>
            Serializes object to Json.
            </summary>
            <param name="obj">The instance.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.ToJsonFile(System.Object,System.String)">
            <summary>
            Saves object to Json file.
            </summary>
            <param name="obj">The instance.</param>
            <param name="fileName">The file.</param>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.TryDispose(System.IDisposable)">
            <summary>
            Tries the to call Dispose.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ObjectExtensions.TryDispose(System.IDisposable,System.Boolean)">
            <summary>
            Tries to Dispose the object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="throwException">if set to <count>true</count> [throw exception].</param>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.Properties.Resources">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="F:dotNetTips.Utility.Standard.Extensions.Properties.Resources.resourceMan">
            <summary>
            The resource man
            </summary>
        </member>
        <member name="F:dotNetTips.Utility.Standard.Extensions.Properties.Resources.resourceCulture">
            <summary>
            The resource culture
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.Properties.Resources.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dotNetTips.Utility.Standard.Extensions.Properties.Resources" /> class.
            </summary>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.ResourceManager">
            <summary>
            Returns the cached ResourceManager instance used by this class.
            </summary>
            <value>The resource manager.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.Culture">
            <summary>
            Overrides the current thread's CurrentUICulture property for all
            resource lookups using this strongly typed resource class.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.Bytes">
            <summary>
            Looks up a localized string similar to Bytes.
            </summary>
            <value>The bytes.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.CannotBeOfTypeException">
            <summary>
            Looks up a localized string similar to {0} cannot be of type Exception. Use a more specific exception from the framework or a custom Exception inheriting type Exception (only)..
            </summary>
            <value>The cannot be of type exception.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.CollectionIsNullOrHasNoItems">
            <summary>
            Looks up a localized string similar to Collection is null or has no items..
            </summary>
            <value>The collection is null or has no items.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.CollectionSizeIsNotValid">
            <summary>
            Looks up a localized string similar to Collection size is not valid..
            </summary>
            <value>The collection size is not valid.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.ExceptionCannotBeNull">
            <summary>
            Looks up a localized string similar to Exception cannot be null..
            </summary>
            <value>The exception cannot be null.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.FileNotFound">
            <summary>
            Looks up a localized string similar to File not found..
            </summary>
            <value>The file not found.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.FileSizeIsInvalid">
            <summary>
            Looks up a localized string similar to File size is invalid..
            </summary>
            <value>The file size is invalid.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.FolderNotFound">
            <summary>
            Looks up a localized string similar to Folder not found..
            </summary>
            <value>The folder not found.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.GB">
            <summary>
            Looks up a localized string similar to GB.
            </summary>
            <value>The gb.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.GuidIsEmpty">
            <summary>
            Looks up a localized string similar to Guid is Empth..
            </summary>
            <value>The unique identifier is empty.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.InvalidType">
            <summary>
            Looks up a localized string similar to Invalid type..
            </summary>
            <value>The type of the invalid.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.KB">
            <summary>
            Looks up a localized string similar to KB.
            </summary>
            <value>The kb.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.LengthMustBeGreaterThan0">
            <summary>
            Looks up a localized string similar to Length must be greater than 0..
            </summary>
            <value>The length must be greater than0.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.MB">
            <summary>
            Looks up a localized string similar to MB.
            </summary>
            <value>The mb.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.ParameterIsInvalid">
            <summary>
            Looks up a localized string similar to Parameter is invalid. .
            </summary>
            <value>The parameter is invalid.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.StringDoesNotMatch">
            <summary>
            Looks up a localized string similar to Strings do not match..
            </summary>
            <value>The string does not match.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.StringDoesNotMatchMaximumLength">
            <summary>
            Looks up a localized string similar to String does not matach maximum length..
            </summary>
            <value>The maximum length of the string does not match.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.StringDoesNotMatchMinimumLength">
            <summary>
            Looks up a localized string similar to String does not match minimum length..
            </summary>
            <value>The minimum length of the string does not match.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.StringIsEmpty">
            <summary>
            Looks up a localized string similar to String is empty..
            </summary>
            <value>The string is empty.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.StringIsNotValid">
            <summary>
            Looks up a localized string similar to String is not valid..
            </summary>
            <value>The string is not valid.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.TheValueIsNotDefinedInTheEnumeration">
            <summary>
            Looks up a localized string similar to The values are not defined in the enum..
            </summary>
            <value>The value is not defined in the enumeration.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.ValueIsInvalid">
            <summary>
            Looks up a localized string similar to Value is invalid..
            </summary>
            <value>The value is invalid.</value>
        </member>
        <member name="P:dotNetTips.Utility.Standard.Extensions.Properties.Resources.Yesterday">
            <summary>
            Looks up a localized string similar to Yesterday.
            </summary>
            <value>The yesterday.</value>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.RegistryExtensions">
            <summary>
            Class RegistryExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.RegistryExtensions.GetSubKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Gets the registry key sub key.
            </summary>
            <param name="key">The key.</param>
            <param name="name">The name.</param>
            <returns>RegistryKey.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.RegistryExtensions.GetValue``1(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Gets the registry key value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="name">The name.</param>
            <returns>T.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.StringExtensions">
            <summary>
            Class StringExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.StringExtensions.ContainsAny(System.String,System.String[])">
            <summary>
            Determines whether the specified the string contains any.
            </summary>
            <param name="input">The string.</param>
            <param name="characters">The characters.</param>
            <returns><c>true</c> if the specified characters contains any; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">input - List cannot be null.
            or
            characters - Characters cannot be null or 0 length.
            or
            Null character.</exception>
            <exception cref="T:System.ArgumentNullException">Null character.</exception>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.StringExtensions.HasValue(System.String)">
            <summary>
            Determines whether the specified input has value.
            </summary>
            <param name="input">The input.</param>
            <returns><c>true</c> if the specified input has value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.StringExtensions.ToStringTrimmed(System.String)">
            <summary>
            To the string trimmed.
            </summary>
            <param name="input">The input.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.StringExtensions.ComputeSha256Hash(System.String)">
            <summary>
            Computes the sha256 hash.
            </summary>
            <param name="data">The data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.StringExtensions.DefaultIfNull(System.String)">
            <summary>
            Defaults if null.
            </summary>
            <param name="value">The s.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.StringExtensions.DefaultIfNull(System.String,System.String)">
            <summary>
            Defaults if null.
            </summary>
            <param name="value">The s.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.StringExtensions.DefaultIfNullOrEmpty(System.String,System.String)">
            <summary>
            Defaults if null or empty.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.StringExtensions.Concat(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Concatenates the specified first message with passed in string[].
            </summary>
            <param name="firstMessage">The first message.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="addLineFeed">The add line feed. If set to true, delimiter will not be used.</param>
            <param name="args">The arguments.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.StringExtensions.Indent(System.String,System.Int32,System.Char)">
            <summary>
            Indents the specified length.
            </summary>
            <param name="str">The string.</param>
            <param name="length">The length.</param>
            <param name="indentationCharacter">The indentation character.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">length - Length must be greater than 0.</exception>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.ThreadExtensions">
            <summary>
            Class ThreadExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ThreadExtensions.WaitUntil(System.Threading.Thread,System.TimeSpan)">
            <summary>
            Waits for a certian amount of time. Does not use timer (no need to call Dispose).
            </summary>
            <param name="thread">The thread.</param>
            <param name="interval">The wait interval.</param>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.ThreadExtensions.WaitUntil(System.Threading.Thread,System.TimeSpan,System.Int32)">
            <summary>
            Waits the until.
            </summary>
            <param name="thread">The thread.</param>
            <param name="interval">The wait interval.</param>
            <param name="waitInterations">The wait interations.</param>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.TypeExtensions">
            <summary>
            Class TypeExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.TypeExtensions.GetFieldHash``1(System.Func{``0})">
            <summary>
            Gets the field hash.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback">The callback.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.TypeExtensions.HasParameterlessConstructor(System.Type)">
            <summary>
            Determines whether [has parameterless constructor] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [has parameterless constructor] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.TypeExtensions.Max``1(``0,``0)">
            <summary>
            Return maximum type. Works with value and reference types.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj1">The obj1.</param>
            <param name="obj2">The obj2.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException">obj1 - Object 1 cannot be null.
            or
            obj2 - Object 1 cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">obj1 - Object 1 cannot be null.
            or
            obj2 - Object 1 cannot be null.</exception>
            <remarks>Original code by: Jeremy Clark</remarks>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.TypeExtensions.Create``1">
            <summary>
            Creates type instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
            <remarks>Original code by: Jeremy Clark</remarks>
        </member>
        <member name="T:dotNetTips.Utility.Standard.Extensions.WebClientExtensions">
            <summary>
            Class WebClientExtensions.
            </summary>
        </member>
        <member name="M:dotNetTips.Utility.Standard.Extensions.WebClientExtensions.ConvertFrom``1(System.Net.WebClient,System.String)">
            <summary>
            Gets the json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="client">The client.</param>
            <param name="url">The URL.</param>
            <returns>T.</returns>
        </member>
    </members>
</doc>
